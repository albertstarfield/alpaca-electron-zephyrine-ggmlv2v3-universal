--- a/engine.py
+++ b/engine.py
@@ -492,6 +492,7 @@
         self.llm_thread = None  # Keep track of running LLM threads.
         # Start the scheduler thread
         self.scheduler_thread = Thread(target=self.scheduler)
+        self._condition = threading.Condition(self._model_lock) # associate the condition with model lock
         self.scheduler_thread.daemon = True
         self.scheduler_thread.start()
 
@@ -636,8 +637,11 @@
 
     def scheduler(self):
         """Scheduler loop (modified to use process_json_response)."""
-        while not self._stop_event.is_set():
-          try: # Added broad exception handling
+        while not self._stop_event.is_set(): # Keep the main loop
+          with self._condition: # Acquire the condition (and thus the lock)
+            while not self.get_next_task() and not self._stop_event.is_set():
+              print(OutputFormatter.color_prefix(f"Scheduler waiting for condition...", "Internal"))
+              self._condition.wait()  # Wait for notification
             task = self.get_next_task()
             if task:
                 task_item, priority = task  # Unpack the outer tuple: ((task, args), priority)
@@ -803,7 +807,7 @@
                     self.current_task = None  # Always clear the current task
                     if self.llm_thread:
                         self._stop_event.clear()
-                    if task_callable == self.generate_response and priority == 0:
+                    if task_callable == self.generate_response and priority == 0: # for CLI prompt execution
                         return result
 
             else:
@@ -870,6 +874,7 @@
             finally:
                 self.is_llm_running = False
                 print(OutputFormatter.color_prefix(f"invoke_llm: Set is_llm_running to False in finally block", "Internal"))
+                self._condition.notify() # Notify scheduler AFTER releasing the lock
 
     def report_queue_status(self): #Modified to report the meshNetworkProcessingIO Queue
         """Reports the queue status (length and contents) every 10 seconds."""